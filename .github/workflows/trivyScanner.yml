on:
  workflow_call:
    inputs:
      RELEASE_REVISION:
        required: true
        type: string
      ECR_REPOSITORY:
        required: true
        type: string
      DEPLOYMENT:
        required: false
        type: string


permissions:
  issues: write

name: Scan docker images for vulnerabilities

env:
  DEPLOYMENT: ${{ inputs.DEPLOYMENT }}

jobs:
  reusable_workflow_job:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: rackoot/common-workflows
        ref: main

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_533267199925 }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_533267199925 }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Pull docker image
      env:
        DOCKER_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPOSITORY }}:${{ inputs.RELEASE_REVISION }}
      run: docker pull ${{ env.DOCKER_IMAGE }}

    - name: Set deployment name # if is different from secrets.DEPLOYMENT
      if: ${{ inputs.DEPLOYMENT }}
      run: echo "DEPLOYMENT=${{ inputs.DEPLOYMENT }}" >> $GITHUB_ENV

    - name: Run Trivy OS vulnerability scanner
      env:
        DOCKER_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPOSITORY }}:${{ inputs.RELEASE_REVISION }}
      uses: aquasecurity/trivy-action@0.30.0
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}
        format: 'json'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os'
        severity: 'CRITICAL,HIGH'
        output: os.json
        timeout: 10m

    - name: Run Trivy Library vulnerability scanner
      env:
        DOCKER_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ECR_REPOSITORY }}:${{ inputs.RELEASE_REVISION }}
      uses: aquasecurity/trivy-action@0.30.0
      with:
        image-ref: ${{ env.DOCKER_IMAGE }}
        format: 'json'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'library'
        severity: 'CRITICAL,HIGH'
        output: library.json
        timeout: 10m

    - name: Check vulnerabilities from Trivy reports
      run: |
        total=$(jq '.Results[].Vulnerabilities | length' os.json library.json 2>/dev/null | awk '{s+=$1} END {print s}')
        if [[ $total -gt 0 ]]; then
          echo "SLACK_MESSAGE=:disappointed: Found $total vulnerabilities in ${{ env.DEPLOYMENT }}" >> $GITHUB_ENV
          echo "HAS_VULNS=true" >> $GITHUB_ENV
        else
          echo "SLACK_MESSAGE=:blush: No vulnerabilities found in ${{ env.DEPLOYMENT }}" >> $GITHUB_ENV
          echo "HAS_VULNS=false" >> $GITHUB_ENV
        fi

    - name: Upload OS report to Slack
      if: env.HAS_VULNS == 'true'
      uses: MeilCli/slack-upload-file@v4
      with:
        slack_token: ${{ secrets.SLACK_BOT_TOKEN }}
        channel_id: ${{ vars.SLACK_CHANNEL }}
        file_path: 'os.json'
        file_type: 'json'
        initial_comment: '${{ env.SLACK_MESSAGE }} (OS)'
        title: "OS vulnerabilities for ${{ env.DEPLOYMENT }}"

    - name: Upload Library report to Slack
      if: env.HAS_VULNS == 'true'
      uses: MeilCli/slack-upload-file@v4
      with:
        slack_token: ${{ secrets.SLACK_BOT_TOKEN }}
        channel_id: ${{ vars.SLACK_CHANNEL }}
        file_path: 'library.json'
        file_type: 'json'
        initial_comment: '${{ env.SLACK_MESSAGE }} (Library)'
        title: "Library vulnerabilities for ${{ env.DEPLOYMENT }}"

    - name: Create GitHub issue for OS vulnerabilities
      if: env.HAS_VULNS == 'true'
      env:
        INPUT_LABEL: vulnerability
        INPUT_ASSIGNEE: ${{ env.GITHUB_REPOSITORY_OWNER }}
        INPUT_PROJECT_ID: ${{ env.DEPLOYMENT }}
        INPUT_FILENAME: os.json
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: scripts/commitIssue.sh

    - name: Create GitHub issue for Library vulnerabilities
      if: env.HAS_VULNS == 'true'
      env:
        INPUT_LABEL: vulnerability
        INPUT_ASSIGNEE: ${{ env.GITHUB_REPOSITORY_OWNER }}
        INPUT_PROJECT_ID: ${{ env.DEPLOYMENT }}
        INPUT_FILENAME: library.json
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: scripts/commitIssue.sh